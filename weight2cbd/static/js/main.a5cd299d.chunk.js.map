{"version":3,"sources":["Result.js","InputForm.js","App.js","reportWebVitals.js","index.js"],"names":["Result","props","className","show","dosage","InputForm","useState","email","setEmail","weight","setWeight","sex","setSex","type","name","id","value","onClick","event","target","defaultChecked","htmlFor","ReactSlider","thumbClassName","trackClassName","min","max","defaultValue","renderThumb","state","valueNow","onChange","index","toLocaleString","minimumFractionDigits","maximumFractionDigits","error","getDosage","emailValue","document","querySelector","test","String","toLowerCase","validateEmail","customURL","fetch","storeEmail","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wOAQeA,EANA,SAACC,GAAD,OACX,sBAAKC,UAAS,6DAAwDD,EAAME,KAAO,KAAO,kBAA1F,wCAC+B,uBAAMD,UAAU,YAAhB,UAA6BD,EAAMG,OAAnC,QAD/B,+BC4GWC,EA3GG,WAEd,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAsBJ,mBAAS,OAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KA2CA,OACI,uBAAMV,UAAU,cAAhB,UAEI,sBAAKA,UAAU,yBAAf,UACI,uBAAOA,UAAU,yBAAjB,oBACA,sBAAKA,UAAU,iCAAf,UACI,sBAAKA,UAAU,OAAf,UACI,uBAAOA,UAAU,OAAOW,KAAK,QAAQC,KAAK,MAAMC,GAAG,WAAWC,MAAM,MAAMC,QAAS,SAAAC,GAAK,OAAIN,EAAOM,EAAMC,OAAOH,QAAQI,gBAAc,IACtI,uBAAOC,QAAQ,WAAf,sBAEJ,sBAAKnB,UAAU,OAAf,UACI,uBAAOA,UAAU,OAAOW,KAAK,QAAQC,KAAK,MAAMC,GAAG,aAAaC,MAAM,QAAQC,QAAS,SAAAC,GAAK,OAAIN,EAAOM,EAAMC,OAAOH,UACpH,uBAAOK,QAAQ,aAAf,4BAKZ,sBAAKnB,UAAU,yBAAf,UACI,uBAAOmB,QAAQ,SAASnB,UAAU,yBAAlC,qBACA,qBAAKA,UAAU,YAAf,SACI,cAACoB,EAAA,EAAD,CACIpB,UAAU,qEACVqB,eAAe,uGACfC,eAAe,gCACfC,IAAK,GACLC,IAAK,IACLC,aAAclB,EAEdmB,YAAa,SAAC3B,EAAO4B,GAAR,OAAkB,+CAAS5B,GAAT,aAAgB,qBAAKC,UAAU,6BAAf,SAA6C2B,EAAMC,eAClGC,SAAU,SAACf,EAAOgB,GACdtB,EAAUM,IAEdF,KAAK,gBAKjB,cAAC,EAAD,CACIV,OA9EM,WACd,IAAIA,EAAS,EAEb,IAII,GAFAA,EAAUK,EAAS,EAOV,UALDE,EAMAP,GAAU,GAIlB,OAAOA,EAAO6B,eAAe,QAAS,CAClCC,sBAAuB,EACvBC,sBAAuB,IAG7B,MAAOC,GACL,MAAO,iBAuDKC,GACRlC,KAAMI,IAGV,sBAAKL,UAAS,kEAA6DK,EAAQ,SAAW,MAA9F,UACI,uBAAOL,UAAU,GAAGmB,QAAQ,QAA5B,yEACA,uBAAOnB,UAAU,wCAAwCW,KAAK,QAAQC,KAAK,QAAQC,GAAG,aACtF,mBAAGb,UAAU,6EACTe,QAAS,WACL,IAAIqB,EAAaC,SAASC,cAAc,aAAaxB,OA3DnD,SAACT,GAEnB,MADW,wJACDkC,KAAKC,OAAOnC,GAAOoC,gBA0DTC,CAAcN,KACd9B,EAAS8B,GAxDd,SAAC/B,GAEhB,IAAIsC,EAAS,qEAAiEtC,GAE9EuC,MAAMD,GAqDcE,CAAWT,KALvB,2CCpFDU,MATf,WACE,OACE,uBAAM9C,UAAU,kFAAhB,UACE,oBAAIA,UAAU,wCAAd,0CACA,cAAC,EAAD,QCKS+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASsB,eAAe,SAM1BZ,M","file":"static/js/main.a5cd299d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst Result = (props) => (\r\n    <div className={`m-4 text-center text-lg text-green-900 select-none ${props.show ? null : 'filter blur-sm'}`}>\r\n        Vous avez besoin d'environ <span className=\"font-bold\">{props.dosage}mg</span> de CBD quotidiennement.\r\n    </div>\r\n);\r\n\r\nexport default Result;\r\n","import React, { useState } from 'react';\r\nimport ReactSlider from 'react-slider';\r\nimport Result from './Result';\r\n\r\nconst InputForm = () => {\r\n\r\n    const [email, setEmail] = useState(null);\r\n    const [weight, setWeight] = useState(70);\r\n    const [sex, setSex] = useState('man');\r\n\r\n\r\n    const getDosage = () => {\r\n        let dosage = 0;\r\n\r\n        try {\r\n\r\n            dosage = (weight / 2);\r\n            \r\n            switch (sex) {\r\n                default:\r\n                case 'man':\r\n                    break;\r\n                \r\n                case 'woman':\r\n                    dosage *= 0.8;\r\n            }\r\n\r\n            \r\n            return dosage.toLocaleString('fr-FR', {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: 1\r\n            });\r\n\r\n        } catch (error) {\r\n            return \"<b>Erreur</b>\";\r\n        }\r\n\r\n    }\r\n\r\n    const validateEmail = (email) => {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n    const storeEmail = (email) => {\r\n\r\n        let customURL = `https://apimaker.alwaysdata.net/api/cone/addLead.php?email=${email}`;\r\n\r\n        fetch(customURL);\r\n    }\r\n\r\n    return (\r\n        <form className=\"w-full pt-4\">\r\n\r\n            <div className=\"flex items-center mx-4\">\r\n                <label className=\"whitespace-nowrap mr-4\">Sexe :</label>\r\n                <div className=\"flex flex-col items-start mx-4\">\r\n                    <div className=\"flex\">\r\n                        <input className=\"mr-2\" type=\"radio\" name=\"sex\" id=\"manRadio\" value=\"man\" onClick={event => setSex(event.target.value)} defaultChecked/>\r\n                        <label htmlFor=\"manRadio\">Homme</label>\r\n                    </div>\r\n                    <div className=\"flex\">\r\n                        <input className=\"mr-2\" type=\"radio\" name=\"sex\" id=\"womanRadio\" value=\"woman\" onClick={event => setSex(event.target.value)}/>\r\n                        <label htmlFor=\"womanRadio\">Femme</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center mx-4\">\r\n                <label htmlFor=\"weight\" className=\"whitespace-nowrap mr-4\">Poids :</label>\r\n                <div className=\"flex-grow\">\r\n                    <ReactSlider\r\n                        className=\"w-full h-5 p-10 flex items-center filter drop-shadow flex-shrink-0\"\r\n                        thumbClassName=\"rounded-full w-8 h-8 px-2 text-center bg-green-700 py-1 cursor-default align-top flex justify-center\"\r\n                        trackClassName=\"h-8 rounded-full bg-green-400\"\r\n                        min={30}\r\n                        max={150}\r\n                        defaultValue={weight}\r\n                        // renderTrack={(props, state) => <div {...props}>{console.log(props)}</div>}\r\n                        renderThumb={(props, state) => <div {...props}><div className=\"text-center text-green-100\">{state.valueNow}</div></div>}\r\n                        onChange={(value, index) => {\r\n                            setWeight(value);\r\n                        }}\r\n                        name=\"weight\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <Result\r\n                dosage={getDosage()}\r\n                show={email}\r\n            />\r\n\r\n            <div className={`flex items-center m-4 mt-8 p-4 bg-green-200 rounded-3xl ${email ? 'hidden' : null}`}>\r\n                <label className=\"\" htmlFor=\"email\">Entrez votre adresse e-mail pour voir le r√©sultat &rarr;</label>\r\n                <input className=\"ml-4 py-1 px-3 rounded-full flex-grow\" type=\"email\" name=\"email\" id=\"emailBox\" />\r\n                <p className=\"ml-4 bg-green-400 px-2 py-1 rounded-full hover:bg-green-500 cursor-pointer\"\r\n                    onClick={() => {\r\n                        let emailValue = document.querySelector('#emailBox').value;\r\n                        if (validateEmail(emailValue)) {\r\n                            setEmail(emailValue);\r\n                            storeEmail(emailValue);\r\n                        }\r\n                    }}\r\n                >Voir mon dosage de CBD</p>\r\n            </div>\r\n            \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default InputForm;","import './App.css';\r\nimport InputForm from './InputForm'\r\n\r\nfunction App() {\r\n  return (\r\n    <main className=\"w-2/3 flex flex-col filter drop-shadow bg-green-100 align-middle justify-center\">\r\n      <h1 className=\"p-4 font-bold text-3xl text-green-900\">Calculateur de dosage de CBD</h1>\r\n      <InputForm />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}